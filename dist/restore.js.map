{"version":3,"file":"restore.js","sources":["../src/cache/utils.ts","../src/cache/compression.ts","../src/cache/localCache.ts","../src/restore.ts"],"sourcesContent":["import * as fs from 'fs'\nimport * as path from 'path'\nimport * as core from '@actions/core'\n\n/**\n * Get cache directory path\n * @returns Absolute path of the cache directory\n */\nexport function getCacheDir(): string {\n  // Default to using .cache directory under runner work directory\n  const cacheDir =\n    process.env.RUNNER_TOOL_CACHE ||\n    path.join(process.env.HOME || '/tmp', '.local-cache')\n\n  // Ensure cache directory exists\n  if (!fs.existsSync(cacheDir)) {\n    fs.mkdirSync(cacheDir, { recursive: true })\n  }\n\n  return cacheDir\n}\n\n/**\n * Generate cache file path\n * @param key Cache key\n * @returns Absolute path of the cache file\n */\nexport function getCacheFilePath(key: string): string {\n  // Use MD5 hash function to process key name to ensure filename safety\n  const safeKey = key.replace(/[^a-zA-Z0-9]/g, '_')\n  return path.join(getCacheDir(), `${safeKey}.tar.zst`)\n}\n\n/**\n * Check if cache exists\n * @param key Cache key\n * @returns true if cache exists, false otherwise\n */\nexport function cacheExists(key: string): boolean {\n  const cachePath = getCacheFilePath(key)\n  return fs.existsSync(cachePath)\n}\n\n/**\n * Parse path parameters\n * @param pathInput Path input string\n * @returns Array of paths\n */\nexport function resolvePaths(pathInput: string): string[] {\n  // Split input paths and remove empty lines\n  return pathInput\n    .split('\\n')\n    .map((s) => s.trim())\n    .filter((s) => s !== '')\n}\n\n/**\n * Log debug information\n * @param message Debug message\n */\nexport function debug(message: string): void {\n  core.debug(message)\n}\n\n/**\n * Log information\n * @param message Info message\n */\nexport function info(message: string): void {\n  core.info(message)\n}\n\n/**\n * Log warning\n * @param message Warning message\n */\nexport function warning(message: string): void {\n  core.warning(message)\n}\n\n/**\n * Log error\n * @param message Error message\n * @param error Error object\n */\nexport function error(message: string, error?: Error): void {\n  if (error) {\n    core.error(`${message}: ${error.message}`)\n  } else {\n    core.error(message)\n  }\n}\n","import * as exec from '@actions/exec'\nimport * as io from '@actions/io'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { debug, info, error } from './utils.js'\n\n/**\n * Compress files and directories using tar + zstd\n * @param archivePath Path to save the compressed file\n * @param paths Array of file or directory paths to compress\n * @param compressionLevel zstd compression level\n * @returns true if successful, false otherwise\n */\nexport async function compressWithZstd(\n  archivePath: string,\n  paths: string[],\n  compressionLevel: number = 3\n): Promise<boolean> {\n  try {\n    // Ensure tar and zstd commands are available\n    await io.which('tar', true)\n    let zstdPath = ''\n\n    try {\n      zstdPath = await io.which('zstd', true)\n    } catch (err) {\n      error('zstd compression tool not available, please install zstd')\n      throw err\n    }\n\n    // Create target directory (if it doesn't exist)\n    const archiveDir = path.dirname(archivePath)\n    if (!fs.existsSync(archiveDir)) {\n      fs.mkdirSync(archiveDir, { recursive: true })\n    }\n\n    // Create file list for each path or use pattern\n    const fileArgs: string[] = []\n    for (const p of paths) {\n      fileArgs.push(p)\n    }\n\n    // Build tar command\n    const tarArgs = [\n      '--use-compress-program',\n      `${zstdPath} -${compressionLevel}`,\n      '-cf',\n      archivePath,\n      '-P', // Use absolute paths\n      ...fileArgs\n    ]\n\n    debug(\n      `Starting to compress ${paths.join(', ')} to ${archivePath} using zstd`\n    )\n\n    // Execute tar command\n    const exitCode = await exec.exec('tar', tarArgs)\n\n    if (exitCode !== 0) {\n      error(`Compression with zstd failed, exit code: ${exitCode}`)\n      return false\n    }\n\n    info(`Successfully compressed: ${paths.join(', ')} -> ${archivePath}`)\n    return true\n  } catch (err) {\n    error('Error during compression', err as Error)\n    return false\n  }\n}\n\n/**\n * Decompress file using tar + zstd\n * @param archivePath Path to the compressed file\n * @param targetDir Target directory for decompression\n * @returns true if successful, false otherwise\n */\nexport async function decompressWithZstd(\n  archivePath: string,\n  targetDir: string = '/'\n): Promise<boolean> {\n  try {\n    // Ensure tar and zstd commands are available\n    await io.which('tar', true)\n    let zstdPath = ''\n\n    try {\n      zstdPath = await io.which('zstd', true)\n    } catch (err) {\n      error('zstd decompression tool not available, please install zstd')\n      throw err\n    }\n\n    // Confirm compressed file exists\n    if (!fs.existsSync(archivePath)) {\n      error(`Compressed file does not exist: ${archivePath}`)\n      return false\n    }\n\n    // 确保目标目录存在\n    if (!fs.existsSync(targetDir)) {\n      debug(`Creating target directory: ${targetDir}`)\n      try {\n        fs.mkdirSync(targetDir, { recursive: true })\n      } catch (err) {\n        error(`Failed to create target directory: ${targetDir}`, err as Error)\n        // 如果无法创建目录，尝试使用当前目录\n        targetDir = process.cwd()\n        info(`Falling back to current directory: ${targetDir}`)\n      }\n    }\n\n    // 检查目标目录的写入权限\n    try {\n      fs.accessSync(targetDir, fs.constants.W_OK)\n      debug(`Write permission confirmed for directory: ${targetDir}`)\n    } catch (err) {\n      error(`No write permission for directory: ${targetDir}`, err as Error)\n      // 如果没有写入权限，尝试使用临时目录\n      const tempDir = process.env.RUNNER_TEMP || '/tmp'\n      targetDir = tempDir\n      info(`Falling back to temp directory: ${targetDir}`)\n    }\n\n    // Build tar command\n    const tarArgs = [\n      '--use-compress-program',\n      zstdPath,\n      '-xf',\n      archivePath,\n      '-C',\n      targetDir\n    ]\n\n    debug(`Starting to decompress ${archivePath} to ${targetDir}`)\n\n    // Execute tar command\n    const exitCode = await exec.exec('tar', tarArgs)\n\n    if (exitCode !== 0) {\n      error(`Decompression failed, exit code: ${exitCode}`)\n      return false\n    }\n\n    info(`Successfully decompressed: ${archivePath} -> ${targetDir}`)\n    return true\n  } catch (err) {\n    error('Error during decompression', err as Error)\n    return false\n  }\n}\n","import * as core from '@actions/core'\nimport * as fs from 'fs'\nimport { compressWithZstd, decompressWithZstd } from './compression.js'\nimport { cacheExists, getCacheFilePath } from './utils.js'\n\n/**\n * Local Cache class\n */\nexport class LocalCache {\n  /**\n   * Save cache\n   * @param paths Array of paths to cache\n   * @param key Cache key\n   * @param compressionLevel Compression level\n   * @returns true if successful, false otherwise\n   */\n  static async save(\n    paths: string[],\n    key: string,\n    compressionLevel: number = 3\n  ): Promise<boolean> {\n    try {\n      core.info(`Starting to save cache, key: ${key}`)\n      core.debug(`Cache paths: ${paths.join(', ')}`)\n\n      // Check if all paths exist\n      const existingPaths = paths.filter((p) => fs.existsSync(p))\n      if (existingPaths.length === 0) {\n        core.warning('No paths found to cache, skipping cache save')\n        return false\n      }\n\n      // Get cache file path\n      const cachePath = getCacheFilePath(key)\n\n      // Compress files\n      const success = await compressWithZstd(\n        cachePath,\n        existingPaths,\n        compressionLevel\n      )\n\n      if (success) {\n        core.info(`Cache saved successfully: ${key}`)\n        return true\n      } else {\n        core.warning(`Cache save failed: ${key}`)\n        return false\n      }\n    } catch (err) {\n      core.error(`Error saving cache: ${(err as Error).message}`)\n      return false\n    }\n  }\n\n  /**\n   * Restore cache\n   * @param paths Array of target paths to restore\n   * @param primaryKey Primary cache key\n   * @param restoreKeys Array of fallback cache keys\n   * @param targetDir Target directory for decompression\n   * @returns Restore result, including hit status and used key\n   */\n  static async restore(\n    paths: string[],\n    primaryKey: string,\n    restoreKeys: string[] = [],\n    targetDir: string = '/'\n  ): Promise<{ cacheHit: boolean; restoredKey: string | undefined }> {\n    try {\n      core.info(`Starting to restore cache, primary key: ${primaryKey}`)\n      if (restoreKeys.length > 0) {\n        core.debug(`Restore keys: ${restoreKeys.join(', ')}`)\n      }\n\n      // First check primary key\n      if (cacheExists(primaryKey)) {\n        core.info(`Found exact match cache: ${primaryKey}`)\n        const cachePath = getCacheFilePath(primaryKey)\n        const success = await decompressWithZstd(cachePath, targetDir)\n\n        if (success) {\n          core.info(`Cache restored successfully: ${primaryKey}`)\n          return { cacheHit: true, restoredKey: primaryKey }\n        } else {\n          core.warning(`Cache restore failed: ${primaryKey}`)\n        }\n      }\n\n      // If primary key doesn't exist or restore fails, try fallback keys\n      for (const restoreKey of restoreKeys) {\n        if (cacheExists(restoreKey)) {\n          core.info(`Found partial match cache: ${restoreKey}`)\n          const cachePath = getCacheFilePath(restoreKey)\n          const success = await decompressWithZstd(cachePath, targetDir)\n\n          if (success) {\n            core.info(`Cache restored successfully: ${restoreKey}`)\n            return { cacheHit: false, restoredKey: restoreKey }\n          } else {\n            core.warning(`Cache restore failed: ${restoreKey}`)\n          }\n        }\n      }\n\n      core.info('No matching cache found')\n      return { cacheHit: false, restoredKey: undefined }\n    } catch (err) {\n      core.error(`Error restoring cache: ${(err as Error).message}`)\n      return { cacheHit: false, restoredKey: undefined }\n    }\n  }\n\n  /**\n   * Lookup cache\n   * @param primaryKey Primary cache key\n   * @param restoreKeys Array of fallback cache keys\n   * @returns Lookup result, including hit status and found key\n   */\n  static lookup(\n    primaryKey: string,\n    restoreKeys: string[] = []\n  ): { cacheHit: boolean; matchedKey: string | undefined } {\n    try {\n      core.info(`Looking up cache, primary key: ${primaryKey}`)\n\n      // First check primary key\n      if (cacheExists(primaryKey)) {\n        core.info(`Found exact match cache: ${primaryKey}`)\n        return { cacheHit: true, matchedKey: primaryKey }\n      }\n\n      // If primary key doesn't exist, try fallback keys\n      for (const restoreKey of restoreKeys) {\n        if (cacheExists(restoreKey)) {\n          core.info(`Found partial match cache: ${restoreKey}`)\n          return { cacheHit: false, matchedKey: restoreKey }\n        }\n      }\n\n      core.info('No matching cache found')\n      return { cacheHit: false, matchedKey: undefined }\n    } catch (err) {\n      core.error(`Error looking up cache: ${(err as Error).message}`)\n      return { cacheHit: false, matchedKey: undefined }\n    }\n  }\n}\n","import * as core from '@actions/core'\nimport { LocalCache } from './cache/localCache.js'\nimport { resolvePaths } from './cache/utils.js'\n\n/**\n * Restore cache entry function\n */\nasync function run(): Promise<void> {\n  try {\n    // Get input parameters\n    const path = core.getInput('path', { required: true })\n    const key = core.getInput('key', { required: true })\n    const restoreKeys = core.getInput('restore-keys')\n    const failOnCacheMiss = core.getBooleanInput('fail-on-cache-miss')\n    const lookupOnly = core.getBooleanInput('lookup-only')\n\n    // Parse paths and restore keys\n    const paths = resolvePaths(path)\n    const restoreKeysList = restoreKeys\n      ? restoreKeys\n          .split('\\n')\n          .map((s) => s.trim())\n          .filter((s) => s !== '')\n      : []\n\n    core.debug(`Paths: ${paths.join(', ')}`)\n    core.debug(`Key: ${key}`)\n    core.debug(`Restore keys: ${restoreKeysList.join(', ')}`)\n\n    // If just looking up cache\n    if (lookupOnly) {\n      const { cacheHit } = LocalCache.lookup(key, restoreKeysList)\n      core.setOutput('cache-hit', cacheHit.toString())\n      core.setOutput('cache-primary-key', key)\n\n      if (failOnCacheMiss && !cacheHit) {\n        core.setFailed('No matching cache found')\n      }\n      return\n    }\n\n    const workspaceDir = process.env.GITHUB_WORKSPACE || process.cwd()\n\n    // Restore cache\n    const { cacheHit, restoredKey } = await LocalCache.restore(\n      paths,\n      key,\n      restoreKeysList,\n      workspaceDir\n    )\n    core.setOutput('cache-hit', cacheHit.toString())\n    core.setOutput('cache-primary-key', key)\n\n    if (cacheHit) {\n      core.info('Cache restored successfully')\n    } else if (restoredKey) {\n      core.info(`Cache restored with partial match key: ${restoredKey}`)\n    } else {\n      core.info('No matching cache found')\n\n      // If fail option is set and no cache hit\n      if (failOnCacheMiss) {\n        core.setFailed('No matching cache found')\n      }\n    }\n  } catch (err) {\n    core.setFailed(`Action failed: ${(err as Error).message}`)\n  }\n}\n\nrun()\n"],"names":[],"mappings":"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"}